{"version":3,"sources":["services/persons.js","components/Persons.js","components/PersonForm.js","components/Filter.js","components/Notification.js","components/App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Persons","personsToShow","handleDelete","map","person","key","name","number","type","onClick","PersonForm","onSubmit","newName","newNumber","onChange","value","Filter","search","Notification","message","className","App","useState","persons","setPersons","setNewName","setNewNumber","setSearch","notificationMessage","setNotificationMessage","useEffect","personService","initialPerson","handleChange","event","target","handleNotificationMessage","setTimeout","preventDefault","some","find","pers","window","confirm","changedPerson","returnedPerson","catch","error","concat","filter","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.54d08818.chunk.js","sourcesContent":["import axios from 'axios';\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove };\n","import React from 'react';\n\nconst Persons = ({ personsToShow, handleDelete }) => (\n    <div>\n        {personsToShow.map(person => <p key={person.name}>{person.name} {person.number} <button type=\"button\" onClick={() => handleDelete(person)}>Delete</button></p>)}\n    </div>\n)\n\nexport default Persons;\n","import React from 'react';\n\nconst PersonForm = ({ onSubmit, newName, newNumber, onChange }) => (\n    <form onSubmit={onSubmit}>\n        <div>\n            Name: <input value={newName} name=\"name\" onChange={onChange}/>\n        </div>\n        <div>\n            Number: <input value={newNumber} name=\"number\" onChange={onChange}/>\n        </div>\n        <div>\n            <button type=\"submit\">add</button>\n        </div>\n    </form>\n)\n\nexport default PersonForm;\n","import React from 'react';\n\nconst Filter = ({ search, onChange }) => (\n    <div>\n        Name: <input value={search} name=\"search\" onChange={onChange}/>\n    </div>\n)\n\nexport default Filter;\n","import React from 'react';\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className={message.type}>\n            {message.message}\n        </div>\n    )\n}\n\nexport default Notification;\n","import React, { useState, useEffect } from 'react';\nimport personService from '../services/persons';\nimport Persons from './Persons';\nimport PersonForm from './PersonForm';\nimport Filter from './Filter';\nimport Notification from './Notification';\nimport '../index.css';\n\nconst App = () => {\n    const [ persons, setPersons ] = useState([])\n    const [ newName, setNewName ] = useState('')\n    const [ newNumber, setNewNumber ] = useState('')\n    const [ search, setSearch ] = useState('')\n    const [ notificationMessage, setNotificationMessage ] = useState('')\n\n    useEffect(() => {\n        personService\n            .getAll()\n            .then(initialPerson => {\n                setPersons(initialPerson);\n            })\n    }, [])\n\n    const handleChange = (event) => {\n        if (event.target.name === \"name\") {\n            setNewName(event.target.value);\n        } else if (event.target.name === \"number\") {\n            setNewNumber(event.target.value);\n        } else if (event.target.name === \"search\") {\n            setSearch(event.target.value);\n        }\n    }\n\n    const handleNotificationMessage = (message, type) => {\n        if (type !== 'error') {\n            setNewName('');\n            setNewNumber('');\n        }\n        setNotificationMessage({\n            message: message,\n            type: type\n        })\n        setTimeout(() => {\n            setNotificationMessage(null)\n        }, 5000)\n    }\n\n    const handleDelete = (person) => {\n        const result = window.confirm(`Delete ${person.name} from your phonebook?`);\n        if (result) {\n            personService\n                .remove(person.id)\n                .then(() => {\n                    setPersons(persons.filter(pers => pers.id !== person.id))\n                    handleNotificationMessage(`Deleted ${person.name}`, 'inform')\n                })\n                .catch(error => {\n                    handleNotificationMessage(`Person ${person.name} was already removed from server`, 'error')\n                })\n        }\n    }\n\n    const addPerson = (event) => {\n        event.preventDefault();\n\n        if (persons.some((person) => person.name === newName)) {\n            const person = persons.find(pers => pers.name === newName);\n            const result = window.confirm(`${person.name} is already in your phonebook, do you want to replace the old phone number?`);\n            if (result) {\n                const changedPerson = {\n                    ...person,\n                    number: newNumber\n                }\n                personService\n                    .update(person.id, changedPerson)\n                    .then(returnedPerson => {\n                        setPersons(persons.map(pers => pers.id !== returnedPerson.id ? pers : returnedPerson));\n                        handleNotificationMessage(`Updated ${returnedPerson.name}`, 'inform')\n                    })\n                    .catch(error => {\n                        handleNotificationMessage(error.response.data.error, 'error')\n                    })\n            }\n        } else {\n            const personObject = {\n                name: newName,\n                number: newNumber\n            }\n            personService\n                .create(personObject)\n                .then(returnedPerson => {\n                    setPersons(persons.concat(returnedPerson))\n                    handleNotificationMessage(`Added ${returnedPerson.name}`, 'inform')\n                })\n                .catch(error => {\n                    handleNotificationMessage(error.response.data.error, 'error')\n                })\n        }\n    }\n\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notification message={notificationMessage} />\n            <h3>Search</h3>\n            <Filter search={search} onChange={handleChange} />\n            <h3>Add a Number</h3>\n            <PersonForm onSubmit={addPerson} newName={newName} newNumber={newNumber} onChange={handleChange} />\n            <h3>Numbers</h3>\n            <Persons personsToShow={persons.filter(person => person.name.toLowerCase().includes(search.toLowerCase()))} handleDelete={handleDelete} />\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}